from cgitb import text
from random import randint
from re import X
import tkinter as tk
from tkinter import CENTER, font, messagebox as mb
from turtle import left, width
from unittest import result
#map size 16 *18 도착지점 인덱스 [15][17]
map1 = [["●", "■", "□", "□", "□", "■", "□", "□", "□", "□", "■", "■", "■", "■", "■", "■"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "□", "□", "□", "□"],
        ["□", "■", "□", "■", "□", "□", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "□", "□", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "□", "□", "■", "□", "■", "□", "■", "□", "□", "□", "□", "■", "□", "■", "□"],
        ["■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "■", "■", "■", "□", "■", "□"],
        ["□", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□", "□", "□", "□", "■", "□"],
        ["□", "■", "■", "■", "□", "■", "■", "■", "□", "■", "□", "■", "■", "■", "□", "□"],
        ["□", "□", "□", "■", "□", "□", "□", "□", "□", "■", "□", "□", "■", "■", "□", "■"],
        ["■", "■", "□", "■", "■", "■", "□", "□", "■", "□", "■", "□", "■", "□", "□", "■"],
        ["□", "□", "□", "□", "■", "■", "■", "■", "■", "□", "■", "□", "■", "■", "■", "■"],
        ["□", "■", "■", "□", "□", "□", "■", "■", "□", "□", "□", "□", "□", "■", "■", "■"],
        ["□", "■", "■", "□", "■", "□", "□", "■", "□", "■", "□", "■", "□", "□", "□", "□"],
        ["□", "■", "■", "□", "■", "■", "□", "□", "□", "■", "□", "■", "□", "■", "■", "□"],
        ["□", "■", "■", "□", "□", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□", "□"],
        ["□", "□", "□", "□", "■", "□", "□", "□", "□", "■", "□", "■", "□", "■", "■", "■"],
        ["□", "■", "■", "□", "■", "□", "■", "■", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "■", "□", "□", "■", "■", "■", "■", "■", "■", "■", "■", "★"]]

map2 = [["●", "□", "□", "■", "■", "■", "□", "□", "□", "■", "□", "□", "□", "□", "□", "■"],
        ["□", "□", "□", "■", "□", "□", "□", "■", "□", "■", "□", "■", "■", "■", "□", "■"],
        ["■", "■", "□", "■", "□", "■", "■", "■", "□", "□", "□", "■", "□", "■", "□", "■"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "■", "□", "■", "□", "□", "□", "■"],
        ["□", "□", "□", "□", "□", "■", "□", "■", "■", "■", "□", "■", "■", "■", "■", "■"],
        ["□", "■", "■", "■", "□", "■", "□", "□", "□", "□", "□", "□", "□", "□", "■", "□"],
        ["■", "■", "□", "□", "□", "■", "■", "□", "■", "■", "■", "■", "■", "□", "■", "□"],
        ["■", "□", "□", "■", "■", "■", "□", "□", "□", "■", "□", "□", "■", "■", "■", "□"],
        ["■", "□", "■", "■", "□", "□", "□", "■", "□", "□", "□", "■", "■", "□", "□", "□"],
        ["■", "□", "□", "■", "□", "■", "□", "■", "■", "■", "□", "■", "□", "□", "■", "■"],
        ["■", "■", "□", "■", "■", "■", "□", "■", "□", "□", "□", "□", "□", "■", "■", "□"],
        ["□", "□", "□", "■", "□", "□", "□", "□", "□", "□", "■", "□", "■", "□", "□", "□"],
        ["□", "■", "□", "□", "□", "■", "■", "□", "■", "■", "■", "□", "□", "□", "■", "□"],
        ["□", "■", "■", "■", "□", "■", "■", "□", "□", "□", "■", "□", "■", "■", "■", "■"],
        ["□", "□", "□", "■", "□", "■", "□", "□", "■", "□", "□", "□", "□", "□", "□", "□"],
        ["■", "■", "□", "■", "■", "■", "□", "■", "■", "□", "■", "■", "■", "■", "■", "□"],
        ["□", "□", "□", "□", "■", "□", "□", "■", "■", "□", "■", "□", "□", "□", "■", "■"],
        ["□", "■", "■", "□", "□", "□", "□", "■", "■", "□", "□", "□", "■", "□", "□", "★"]]

map3 = [["●", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "■", "■", "■", "■", "■", "■", "■", "■", "■", "■", "■", "■", "■", "■", "□"],
        ["□", "■", "□", "□", "□", "■", "□", "■", "□", "□", "■", "□", "□", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "□", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "□", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "□", "■", "□", "□", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "□", "□", "■", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "□", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "□", "□", "■", "□", "■", "□", "□", "□"],
        ["□", "■", "□", "■", "□", "■", "□", "■", "■", "□", "■", "□", "■", "■", "■", "■"],
        ["□", "■", "□", "■", "□", "□", "□", "■", "□", "□", "■", "□", "■", "□", "□", "□"],
        ["□", "■", "□", "■", "■", "■", "■", "■", "□", "■", "■", "■", "■", "□", "■", "□"],
        ["□", "□", "□", "■", "■", "■", "■", "■", "□", "□", "□", "□", "□", "□", "■", "★"]]

map4 = [["●", "□", "■", "□", "□", "□", "□", "■", "■", "■", "■", "■", "□", "□", "□", "■"],
        ["■", "□", "■", "□", "■", "■", "□", "□", "■", "□", "□", "■", "□", "■", "□", "□"],
        ["□", "□", "■", "□", "□", "■", "■", "□", "□", "□", "□", "■", "□", "■", "■", "□"],
        ["□", "■", "■", "□", "□", "□", "■", "■", "□", "■", "□", "□", "□", "■", "□", "■"],
        ["□", "□", "□", "□", "■", "□", "□", "□", "■", "□", "■", "□", "■", "□", "□", "□"],
        ["■", "■", "■", "□", "■", "□", "■", "□", "□", "□", "□", "□", "□", "■", "■", "□"],
        ["□", "□", "□", "□", "■", "□", "□", "□", "■", "□", "■", "■", "□", "□", "□", "□"],
        ["□", "■", "□", "■", "■", "□", "■", "■", "□", "□", "■", "□", "□", "■", "■", "■"],
        ["□", "■", "□", "□", "■", "□", "■", "□", "□", "■", "□", "□", "■", "□", "□", "□"],
        ["□", "□", "■", "□", "■", "□", "■", "■", "■", "□", "□", "■", "□", "□", "■", "□"],
        ["□", "□", "□", "□", "□", "□", "■", "□", "□", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "■", "□", "■", "■", "■", "□", "□", "■", "■", "□", "□", "□", "□", "■", "□"],
        ["□", "■", "□", "■", "□", "□", "□", "■", "□", "□", "□", "■", "□", "□", "■", "□"],
        ["□", "■", "□", "□", "□", "■", "■", "□", "□", "■", "□", "■", "■", "□", "■", "□"],
        ["□", "□", "■", "■", "■", "□", "□", "□", "■", "■", "□", "■", "□", "□", "■", "□"],
        ["□", "□", "□", "■", "□", "□", "■", "■", "■", "■", "□", "□", "■", "■", "■", "□"],
        ["□", "■", "■", "□", "□", "□", "■", "■", "□", "□", "■", "□", "■", "□", "■", "□"],
        ["□", "□", "□", "□", "■", "□", "□", "□", "□", "■", "□", "□", "□", "□", "■", "★"]]

map5 = [["●", "□", "■", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "★"]]

map6 = [["●", "□", "□", "□", "■", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□"],
        ["□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "□", "★"]]

map_list = {1 : "map_1", 2 : "map_2", 3 : "map_3", 4 : "map_4", 5 : "map_5", 6 : "map_6"}
map_number = randint(1,6)
map

if(map_list.get(map_number)=="map_1") :
        map = map1
elif(map_list.get(map_number)=="map_2") :
        map = map2
elif(map_list.get(map_number)=="map_3") :
        map = map3
elif(map_list.get(map_number)=="map_4") :
        map = map4
elif(map_list.get(map_number)=="map_5") :
        map = map5
else : map = map6
print("map.length : {}, map[0].length : {}".format(len(map1),len(map1[0])))

result = ""
for i in range(len(map)) :
    for j in range(len(map[0])) :
        result = result + str(map[i][j]) + " "   
    result += "\n"

x = int(0)
y = int(0)

def update_map() :
        global map
        move = ""
        for i in range(len(map)) :
                for j in range(len(map[0])) :
                        move = move + str(map[i][j]) + " "   
                move += "\n"
        label_display.config(text=move)

def escape_map() :
        global map
        finish = ""
        for i in range(len(map)) :
                for j in range(len(map[0])) :
                        finish = finish + str(map[i][j]) + " "   
                finish += "\n"
        label_display.config(text=finish)
        mb.showinfo(title="<Escape>", message="탈출했습니다!!")



def move_up() :
        global map
        global x
        global y
        if(y>0) :
                if(map[y-1][x]=="□") :
                        map[y][x] = "□"
                        y-=1
                        map[y][x] = "●"
                        update_map()
                        
                elif(map[y-1][x]=="★") :
                        map[y][x] = "□"
                        y-=1
                        map[y][x] = "●"
                        escape_map()
                        

def move_down() :
        global map
        global x
        global y
        if(y<17) :
                if(map[y+1][x]=="□") :
                        map[y][x] = "□"
                        y+=1
                        map[y][x] = "●"
                        update_map()
                        
                elif(map[y+1][x]=="★") :
                        map[y][x] = "□"
                        y+=1
                        map[y][x] = "●"
                        escape_map()
                        
                        
def move_left() :
        global map
        global x
        global y
        if(x>0) :
                if(map[y][x-1]=="□") :
                        map[y][x] = "□"
                        x-=1
                        map[y][x] = "●"
                        update_map()
                        
                elif(map[y][x-1]=="★") :
                        map[y][x] = "□"
                        x-=1
                        map[y][x] = "●"
                        escape_map()
                
def move_right() :
        global map
        global x
        global y
        if(x<15) :
                if(map[y][x+1]=="□") :
                        map[y][x] = "□"
                        x+=1
                        map[y][x] = "●"
                        update_map()
                        
                elif(map[y][x+1]=="★") :
                        map[y][x] = "□"
                        x+=1
                        map[y][x] = "●"
                        escape_map()

maze = tk.Tk()
maze.title("Maze-Map : {}".format(map_list.get(map_number)))
maze.geometry('440x520')
# maze.resizable(False,False)

label_timeZone = tk.Label(master=maze)
label_timeZone.pack()

label_time_text = tk.Label(master=label_timeZone, text='Time', font=('Arial',16))
label_time_text.pack(side='top')

label_time = tk.Label(master=label_timeZone, text="00:00:00", font=('Arial', 16))
label_time.pack(side='top')

bt_topArrow = tk.Button(master=maze, text="▲", font=('Arial',16), width=10, command=move_up)
bt_topArrow.pack()

label_center = tk.Label(master=maze)
label_center.pack()

bt_leftArrow = tk.Button(master=label_center, text="◀",font=('Arial',20), height=3, command=move_left)
bt_leftArrow.pack(side='left')

label_display = tk.Label(master=label_center, text=result, width=40, height=18)
label_display.pack(side='left')

bt_rightArrow = tk.Button(master=label_center, text="▶",font=('Arial',20), height=3, command=move_right)
bt_rightArrow.pack(side='right')

bt_bottomArrow = tk.Button(master=maze, text="▼", font=('Arial',16), width=10, command=move_down)
bt_bottomArrow.pack()
maze.mainloop()